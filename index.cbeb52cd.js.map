{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar tableBody = document.querySelector(\"tbody\");\nvar scoreDisplay = document.querySelector(\".game-score\");\nvar startButton = document.querySelector(\"button\");\nvar startMessage = document.querySelector(\".message-start\");\nvar winMessage = document.querySelector(\".message-win\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar messageContainer = document.querySelector(\".message-container\");\nvar gameBoard = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nvar score = 0;\nvar gameStarted = false;\nvar gameWon = false;\ndocument.addEventListener(\"keydown\", handleKeyPress);\nfunction checkGameOver() {\n    for(var row = 0; row < gameBoard.length; row++)for(var column = 0; column < gameBoard[row].length; column++){\n        if (gameBoard[row][column] === 0) return;\n        if (column < gameBoard[row].length - 1 && gameBoard[row][column] === gameBoard[row][column + 1]) return;\n        if (row < gameBoard.length - 1 && gameBoard[row][column] === gameBoard[row + 1][column]) return;\n    }\n    loseMessage.classList.remove(\"hidden\");\n}\nfunction checkGameWin() {\n    var result = gameBoard.some(function(row) {\n        return row.some(function(tile) {\n            return tile === 2048;\n        });\n    });\n    if (result) gameWon = true;\n}\nfunction moveRight() {\n    var moved = false;\n    for(var row = 0; row < gameBoard.length; row++)for(var column = 1; column < gameBoard[row].length; column++){\n        var currentTile = gameBoard[row][column];\n        var nextTile = gameBoard[row][column - 1];\n        if (nextTile > 0) {\n            if (currentTile === 0) {\n                gameBoard[row][column] = nextTile;\n                gameBoard[row][column - 1] = 0;\n                column = -1;\n                moved = true;\n            } else if (currentTile === nextTile) {\n                gameBoard[row][column] *= 2;\n                gameBoard[row][column - 1] = 0;\n                score += gameBoard[row][column];\n                moved = true;\n            }\n        }\n    }\n    if (moved) generateRandomTile();\n}\nfunction moveLeft() {\n    var moved = false;\n    for(var row = 0; row < gameBoard.length; row++)for(var column = gameBoard[row].length - 1; column >= 0; column--){\n        var currentTile = gameBoard[row][column];\n        var nextTile = gameBoard[row][column + 1];\n        if (nextTile > 0) {\n            if (currentTile === 0) {\n                gameBoard[row][column] = nextTile;\n                gameBoard[row][column + 1] = 0;\n                column = gameBoard[row].length;\n                moved = true;\n            } else if (currentTile === nextTile) {\n                gameBoard[row][column] *= 2;\n                gameBoard[row][column + 1] = 0;\n                score += gameBoard[row][column];\n                moved = true;\n            }\n        }\n    }\n    if (moved) generateRandomTile();\n}\nfunction moveUp() {\n    var moved = false;\n    for(var column = 0; column < gameBoard[0].length; column++)for(var row = 0; row < gameBoard.length - 1; row++){\n        var currentTile = gameBoard[row][column];\n        var nextTile = gameBoard[row + 1][column];\n        if (nextTile > 0) {\n            if (currentTile === 0) {\n                var ref;\n                ref = [\n                    nextTile,\n                    0\n                ], gameBoard[row][column] = ref[0], gameBoard[row + 1][column] = ref[1], ref;\n                row = -1;\n                moved = true;\n            } else if (currentTile === nextTile) {\n                gameBoard[row][column] *= 2;\n                gameBoard[row + 1][column] = 0;\n                score += gameBoard[row][column];\n                moved = true;\n            }\n        }\n    }\n    if (moved) generateRandomTile();\n}\nfunction moveDown() {\n    var moved = false;\n    for(var column = 0; column < gameBoard[0].length; column++)for(var row = gameBoard.length - 1; row > 0; row--){\n        var currentTile = gameBoard[row][column];\n        var nextTile = gameBoard[row - 1][column];\n        if (nextTile > 0) {\n            if (currentTile === 0) {\n                gameBoard[row][column] = nextTile;\n                gameBoard[row - 1][column] = 0;\n                row = gameBoard.length;\n                moved = true;\n            } else if (currentTile === nextTile) {\n                gameBoard[row][column] *= 2;\n                gameBoard[row - 1][column] = 0;\n                score += gameBoard[row][column];\n                moved = true;\n            }\n        }\n    }\n    if (moved) generateRandomTile();\n}\nfunction generateRandomTile() {\n    var randomRow = Math.floor(Math.random() * 4);\n    var randomColumn = Math.floor(Math.random() * 4);\n    while(gameBoard[randomRow][randomColumn] !== 0){\n        randomRow = Math.floor(Math.random() * 4);\n        randomColumn = Math.floor(Math.random() * 4);\n    }\n    var number = Math.random() < 0.1 ? 4 : 2;\n    gameBoard[randomRow][randomColumn] = number;\n}\nfunction handleKeyPress(ev) {\n    if (gameStarted) switch(ev.key){\n        case \"ArrowUp\":\n            moveUp();\n            break;\n        case \"ArrowDown\":\n            moveDown();\n            break;\n        case \"ArrowLeft\":\n            moveLeft();\n            break;\n        case \"ArrowRight\":\n            moveRight();\n            break;\n    }\n    render();\n}\nstartButton.addEventListener(\"click\", function() {\n    if (!gameStarted) {\n        // Начало игры\n        gameStarted = true;\n        startButton.textContent = \"Restart\";\n        startButton.classList.add(\"restart\");\n        startButton.classList.remove(\"start\");\n        generateRandomTile();\n        generateRandomTile();\n    } else {\n        gameStarted = false;\n        startButton.textContent = \"Start\";\n        startButton.classList.remove(\"restart\");\n        startButton.classList.add(\"start\");\n        gameBoard = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        score = 0;\n        gameWon = false;\n        winMessage.classList.add(\"hidden\");\n        loseMessage.classList.add(\"hidden\");\n    }\n    render();\n});\nvar render = function() {\n    scoreDisplay.innerHTML = '<span class=\"game-score\">'.concat(score, \"</span>\");\n    tableBody.innerHTML = \"\";\n    for(var i = 0; i < gameBoard.length; i++){\n        var row = document.createElement(\"tr\");\n        row.classList.add(\"field-row\");\n        for(var j = 0; j < gameBoard[i].length; j++){\n            var cellValue = gameBoard[i][j];\n            var cell = document.createElement(\"td\");\n            cell.textContent = cellValue === 0 ? \"\" : cellValue;\n            cell.classList.add(\"field-cell\");\n            if (cellValue !== 0) cell.classList.add(\"field-cell--\".concat(cellValue));\n            row.appendChild(cell);\n        }\n        tableBody.appendChild(row);\n    }\n    checkGameOver();\n    checkGameWin();\n    winMessage.classList.toggle(\"hidden\", !gameWon);\n    if (!gameStarted) messageContainer.appendChild(startMessage);\n    else if (messageContainer.contains(startMessage)) messageContainer.removeChild(startMessage);\n};\n\n//# sourceMappingURL=index.cbeb52cd.js.map\n","'use strict';\n\nconst tableBody = document.querySelector('tbody');\nconst scoreDisplay = document.querySelector('.game-score');\nconst startButton = document.querySelector('button');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst messageContainer = document.querySelector('.message-container');\n\nlet gameBoard = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet score = 0;\nlet gameStarted = false;\nlet gameWon = false;\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nfunction checkGameOver() {\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let column = 0; column < gameBoard[row].length; column++) {\n      if (gameBoard[row][column] === 0) {\n        return;\n      }\n\n      if (column < gameBoard[row].length - 1\n        && gameBoard[row][column] === gameBoard[row][column + 1]) {\n        return;\n      }\n\n      if (row < gameBoard.length - 1\n        && gameBoard[row][column] === gameBoard[row + 1][column]) {\n        return;\n      }\n    }\n  }\n\n  loseMessage.classList.remove('hidden');\n}\n\nfunction checkGameWin() {\n  const result = gameBoard.some(row => row.some(tile => tile === 2048));\n\n  if (result) {\n    gameWon = true;\n  }\n}\n\nfunction moveRight() {\n  let moved = false;\n\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let column = 1; column < gameBoard[row].length; column++) {\n      const currentTile = gameBoard[row][column];\n      const nextTile = gameBoard[row][column - 1];\n\n      if (nextTile > 0) {\n        if (currentTile === 0) {\n          gameBoard[row][column] = nextTile;\n          gameBoard[row][column - 1] = 0;\n          column = -1;\n          moved = true;\n        } else if (currentTile === nextTile) {\n          gameBoard[row][column] *= 2;\n          gameBoard[row][column - 1] = 0;\n          score += gameBoard[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomTile();\n  }\n}\n\nfunction moveLeft() {\n  let moved = false;\n\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let column = gameBoard[row].length - 1; column >= 0; column--) {\n      const currentTile = gameBoard[row][column];\n      const nextTile = gameBoard[row][column + 1];\n\n      if (nextTile > 0) {\n        if (currentTile === 0) {\n          gameBoard[row][column] = nextTile;\n          gameBoard[row][column + 1] = 0;\n          column = gameBoard[row].length;\n          moved = true;\n        } else if (currentTile === nextTile) {\n          gameBoard[row][column] *= 2;\n          gameBoard[row][column + 1] = 0;\n          score += gameBoard[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomTile();\n  }\n}\n\nfunction moveUp() {\n  let moved = false;\n\n  for (let column = 0; column < gameBoard[0].length; column++) {\n    for (let row = 0; row < gameBoard.length - 1; row++) {\n      const currentTile = gameBoard[row][column];\n      const nextTile = gameBoard[row + 1][column];\n\n      if (nextTile > 0) {\n        if (currentTile === 0) {\n          [gameBoard[row][column], gameBoard[row + 1][column]] = [nextTile, 0];\n          row = -1;\n          moved = true;\n        } else if (currentTile === nextTile) {\n          gameBoard[row][column] *= 2;\n          gameBoard[row + 1][column] = 0;\n          score += gameBoard[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomTile();\n  }\n}\n\nfunction moveDown() {\n  let moved = false;\n\n  for (let column = 0; column < gameBoard[0].length; column++) {\n    for (let row = gameBoard.length - 1; row > 0; row--) {\n      const currentTile = gameBoard[row][column];\n      const nextTile = gameBoard[row - 1][column];\n\n      if (nextTile > 0) {\n        if (currentTile === 0) {\n          gameBoard[row][column] = nextTile;\n          gameBoard[row - 1][column] = 0;\n          row = gameBoard.length;\n          moved = true;\n        } else if (currentTile === nextTile) {\n          gameBoard[row][column] *= 2;\n          gameBoard[row - 1][column] = 0;\n          score += gameBoard[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomTile();\n  }\n}\n\nfunction generateRandomTile() {\n  let randomRow = Math.floor(Math.random() * 4);\n  let randomColumn = Math.floor(Math.random() * 4);\n\n  while (gameBoard[randomRow][randomColumn] !== 0) {\n    randomRow = Math.floor(Math.random() * 4);\n    randomColumn = Math.floor(Math.random() * 4);\n  }\n\n  const number = Math.random() < 0.1 ? 4 : 2;\n\n  gameBoard[randomRow][randomColumn] = number;\n}\n\nfunction handleKeyPress(ev) {\n  if (gameStarted) {\n    switch (ev.key) {\n      case 'ArrowUp':\n        moveUp();\n        break;\n      case 'ArrowDown':\n        moveDown();\n        break;\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n      case 'ArrowRight':\n        moveRight();\n        break;\n    }\n  }\n\n  render();\n}\n\nstartButton.addEventListener('click', () => {\n  if (!gameStarted) {\n    // Начало игры\n    gameStarted = true;\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n    startButton.classList.remove('start');\n    generateRandomTile();\n    generateRandomTile();\n  } else {\n    gameStarted = false;\n    startButton.textContent = 'Start';\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n\n    gameBoard = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    score = 0;\n    gameWon = false;\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  }\n\n  render();\n});\n\nconst render = () => {\n  scoreDisplay.innerHTML = `<span class=\"game-score\">${score}</span>`;\n  tableBody.innerHTML = '';\n\n  for (let i = 0; i < gameBoard.length; i++) {\n    const row = document.createElement('tr');\n\n    row.classList.add('field-row');\n\n    for (let j = 0; j < gameBoard[i].length; j++) {\n      const cellValue = gameBoard[i][j];\n      const cell = document.createElement('td');\n\n      cell.textContent = cellValue === 0 ? '' : cellValue;\n      cell.classList.add('field-cell');\n\n      if (cellValue !== 0) {\n        cell.classList.add(`field-cell--${cellValue}`);\n      }\n\n      row.appendChild(cell);\n    }\n\n    tableBody.appendChild(row);\n  }\n\n  checkGameOver();\n  checkGameWin();\n  winMessage.classList.toggle('hidden', !gameWon);\n\n  if (!gameStarted) {\n    messageContainer.appendChild(startMessage);\n  } else if (messageContainer.contains(startMessage)) {\n    messageContainer.removeChild(startMessage);\n  }\n};\n"],"names":["tableBody","document","querySelector","scoreDisplay","startButton","startMessage","winMessage","loseMessage","messageContainer","gameBoard","score","gameStarted","gameWon","generateRandomTile","randomRow","Math","floor","random","randomColumn","number","addEventListener","ev","key","moveUp","moved","column","length","row","ref","currentTile","nextTile","moveDown","moveLeft","moveRight","render","textContent","classList","remove","add","innerHTML","concat","i","createElement","j","cellValue","cell","appendChild","checkGameOver","some","tile","toggle","contains","removeChild"],"version":3,"file":"index.cbeb52cd.js.map"}